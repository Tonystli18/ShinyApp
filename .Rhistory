library(lattice)
require(randomForest)
modFitRF <- randomForest(classe ~ ., data = trainingSet, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
modFitRF
prediction <- predict(modFitRF, testing, type = "class")
prediction <- predict(modFitRF, testingSet, type = "class")
confusionMatrix(prediction, testingSet$classe)
summary(testingSet)
summary(testing)
trainData <- read.csv(trainUrl, na.strings=c("NA","#DIV/0!",""))
trainData <- read.csv(trainUrl)
testing <- read.csv(testUrl)
names(testing)
summary(testing$problem_id)
testing$problem_id
predictTEST <- predict(modFitRF, newdata=testing)
predictTEST <- predict(modFitRF, testing)
predict_FINAL <- predict(modFitRF, testingSet, type = "class")
predict(modFitRF, testingSet, type = "class")
trainData <- read.csv(trainUrl, na.strings=c("NA","#DIV/0!",""))
testData <- read.csv(testUrl, na.strings=c("NA","#DIV/0!",""))
library(caret)
inTrain  <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain, ]
testing  <- trainData[-inTrain, ]
dim(training); dim(testing); dim(testData)
sapply(training, function(x) sum(is.na(x)))
sapply(testing, function(x) sum(is.na(x)))
sapply(validation, function(x) sum(is.na(x)))
rm(validation)
rm(validationSet)
sapply(training, function(x) sum(is.na(x)))
sapply(testing, function(x) sum(is.na(x)))
sapply(testData, function(x) sum(is.na(x)))
sapply(training, function(x) sum(is.na(x)))
trainNAcols <- colnames(training)[colSums(is.na(training)) == 0]
trainNAcols
testDataFactors <- colnames(testData)[colSums(is.na(testData)) == 0]
testDataFactors
rm(testingSet)
testingFactors <- colnames(testing)[colSums(is.na(testing)) == 0]
testingFactors
allFactors <- union(union(trainingFactors, testDataFactors), testingFactors)
trainingFactors <- colnames(training)[colSums(is.na(training)) == 0]
allFactors <- union(union(trainingFactors, testDataFactors), testingFactors)
allFactors
training <- training[, names(training) %in% allFactors]
testing <- testing[, names(testing) %in% allFactors]
testData <- testData[, names(testData) %in% allFactors]
colnames(training)
colnames(testing)
colnames(testData)
trainingSet <- training[, -c(2:5)]
testingSet <- testing[, -c(2:5)]
testData <- testData[, -c(2:5)]
dim(testData)
rm(trainingSet)
rm(testingSet)
training <- training[, -c(2:5)]
testing <- testing[, -c(2:5)]
testData <- testData[, -c(2:5)]
rm(testData)
rm(trainData)
rm(modFitRF)
testData <- read.csv(testUrl, na.strings=c("NA","#DIV/0!",""))
testDataFactors <- colnames(testData)[colSums(is.na(testData)) == 0]
testData <- testData[, names(testData) %in% allFactors]
testData <- testData[, -c(2:5)]
training$new_window <- as.integer(training$new_window)
testing$new_window <- as.integer(testing$new_window)
testData$new_window <- as.integer(testData$new_window)
dim(training)
dim(testing)
dim(testData)
set.seed(513)
trControlRF <- trainControl(method="cv",number=3, verboseIter = FALSE)
modelFitRF<-train(classe ~.,data=training, method="rf", trControl=trControlRF, prox=TRUE)
require(randomForest)
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
predictionRF <- predict(modFitRF, testData)
predictionRF
modFitRF
inTrain  <- createDataPartition(y=trainData$classe, p=0.7, list=FALSE)
trainData <- read.csv(trainUrl, na.strings=c("NA","#DIV/0!",""))
set.seed(12345)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
set.seed(301)
modFitDT <- train(classe ~ ., method="rpart", data=training)
predictionDT <- predict(modFitRF, testData)
predictionDT
AllNA    <- sapply(trainData, function(x) mean(is.na(x))) > 0.95
TrainSet <- trainData[, AllNA==FALSE]
TestSet  <- trainData[, AllNA==FALSE]
dim(TestSet)
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
names(TrainSet)
set.seed(301)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf",
trControl=controlRF)
require(randomForest)
randomForestModel <- randomForest(classe ~. , data = training, method = "class")
randomForestPrediction <- predict(randomForestModel, testing, type = "class")
confusionMatrix(randomForestPrediction, testing$classe)
rm(AllNA)
rm(allNAcols)
rm(TrainSet)
rm(TestSet)
summary(training)
training <- training[, -c(1)]
summary(training)
testing <- testing[, -c(1)]
summary(testing)
summary(testData)
testData <- testData[, -c(1)]
dim(training)
set.seed(123)
trControlRF <- trainControl(method="cv",number=3, verboseIter = TRUE)
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
plot(modFitRF)
prediction <- predict(modFitRF, testing)
prediction
confusionMatrix(prediction, testing$classe)
predictionRF <- predict(modFitRF, dt_testing)
predictionRF
predictionRF <- predict(modFitRF, testData)
predictionRF
trControlRF <- trainControl(method="cv",number=3, verboseIter = TRUE)
modelFitRF<-train(classe ~.,data=training, method="rf", trControl=trControlRF, prox=TRUE)
?randomForest
?trainControl
set.seed(5233)
require(randomForest)
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
modFitRF
predictRF <- predict(modFitRF, testing)
confusionMatrixRF <- confusionMatrix(predictRF, testing$classe)
confusionMatrixRF
library(rattle)
install.packages("rattle")
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
install.packages("rpart")
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
modFitDT <- train(classe ~ ., data=trainingSet, method="rpart", data=training)
modFitDT <- train(classe ~ ., data=trainingSet, method="rpart")
modFitDT <- train(classe ~ ., data=training, method="rpart")
modFitDT$finalModel
fancyRpartPlot(modFitDT)
library(rattle)
library(rattle)
fancyRpartPlot(modFitDT)
fancyRpartPlot(modFitDT)
library(rattle)
fancyRpartPlot(modFitDT)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFitDT)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(modFitDT$finalModel)
?rpart
library(rpart)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(modFitDT)
predictDT <- predict(modFitDT, newdata=testing)
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
library(caret)
predictDT <- predict(modFitDT, newdata=testing)
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
modFitDT <- train(classe ~ ., data=training, method="rpart")
modFitDT$finalModel
predictDT <- predict(modFitDT, newdata=testing)
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
names(testing)
class(testing$new_window)
library(rpart)
library(rattle)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
predictDT <- predict(modFitDT, newdata=testing)
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
set.seed(301)
modFitDecTree <- rpart(classe ~ ., data=training, method="class")
predictDecTree <- predict(modFitDecTree, newdata=testing, type="class")
confMatDecTree
confMatDecTree <- confusionMatrix(predictDecTree, testing$classe)
confMatDecTree
library(rpart)
library(rattle)
set.seed(5233)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(modFitDT)
predictDT <- predict(modFitDT, newdata=testing, type = "class")
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
set.seed(5233)
modFitGBM <- train(classe ~ ., data=training, method="gbm", verbose=FALSE)
set.seed(5233)
modFitGBM <- train(classe ~ ., data=training, method="gbm", verbose=FALSE,
trControl = trainControl(method = "cv", number = 10))
install.packages("adabag")
library(adabag)
?boosting
modFitBoosting <- boosting(classe ~ ., data=training)
set.seed(301)
modFitGBM <- train(classe ~ ., data=training, method="gbm", verbose=TRUE,
trControl = trainControl(method = "cv", number = 10))
set.seed(301)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitGBM  <- train(classe ~ ., data=training, method = "gbm",
trControl = controlGBM, verbose = FALSE)
modFitGBM$finalModel
modFitGBM
modFitGBM$finalModel
predictGBM <- predict(modFitGBM, newdata=testing, type = "class")
confusionMatrixGBM <- confusionMatrix(predictGBM, testing$classe)
confusionMatrixGBM
predictGBM <- predict(modFitGBM, testing)
confusionMatrixGBM <- confusionMatrix(predictGBM, testing$classe)
confusionMatrixGBM
predict1 <- predict(modFitRF, newdata=testData)
predict2 <- predict(modFitDT, newdata=testData)
predict3 <- predict(modFitGBM, newdata=testData)
predict1 <- predict(modFitRF, testData)
predict2 <- predict(modFitDT, testData)
predict3 <- predict(modFitGBM, testData)
predictionRF <- predict(modFitRF, testData)
predict3 <- predict(modFitGBM, newdata=testData)
predict3
predict2
predict2 <- predict(modFitDT, testData)
predict2
?rattle
predictRF <- predict(modFitRF, testing)
set.seed(5233)
predictRF <- predict(modFitRF, testing)
set.seed(5233)
require(randomForest)
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
predictRF <- predict(modFitRF, testing)
predictRF
predictRF <- predict(modFitRF, testData)
predictRF
library(randomForest)
predict2 <- predict(modFitDT, testData)
predict2
predictRF <- predict(modFitRF, testing)
confusionMatrixRF <- confusionMatrix(predictRF, testing$classe)
confusionMatrixRF
library(caret)
predictRF <- predict(modFitRF, testing)
confusionMatrixRF <- confusionMatrix(predictRF, testing$classe)
confusionMatrixRF
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainData <- read.csv(trainUrl, na.strings=c("NA","#DIV/0!",""))
testData <- read.csv(testUrl, na.strings=c("NA","#DIV/0!",""))
library(caret)
inTrain  <- createDataPartition(y=trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain, ]
testing  <- trainData[-inTrain, ]
trainingFactors <- colnames(training)[colSums(is.na(training)) == 0]
testDataFactors <- colnames(testData)[colSums(is.na(testData)) == 0]
testingFactors <- colnames(testing)[colSums(is.na(testing)) == 0]
allFactors <- union(union(trainingFactors, testDataFactors), testingFactors)
allFactors
training <- training[, names(training) %in% allFactors]
testing <- testing[, names(testing) %in% allFactors]
testData <- testData[, names(testData) %in% allFactors]
training <- training[, -c(1:5)]
testing <- testing[, -c(1:5)]
testData <- testData[, -c(1:5)]
training$new_window <- as.integer(training$new_window)
testing$new_window <- as.integer(testing$new_window)
testData$new_window <- as.integer(testData$new_window)
library(corrplot)
corMatrix <- cor(training[, -55])
corrplot(corMatrix, order = "FPC", method = "circle", type = "lower", tl.cex = 0.7, tl.col = rgb(0, 0, 0))
set.seed(503)
require(randomForest)
library(randomForest)
modFitRF <- randomForest(classe ~ ., data = training, method = "rf", importance = T, trControl = trainControl(method = "cv", classProbs=TRUE,savePredictions=TRUE,allowParallel=TRUE, number = 10))
predictRF <- predict(modFitRF, testing)
confusionMatrixRF <- confusionMatrix(predictRF, testing$classe)
confusionMatrixRF
predict(modFitRF, testData)
library(rpart)
library(rattle)
set.seed(503)
modFitDT <- rpart(classe ~ ., data = training, method="class", control = rpart.control(method = "cv", number = 10))
predictDT <- predict(modFitDT, newdata=testing, type = "class")
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
predict2 <- predict(modFitDT, testData)
predict2
modFitDT <- train(classe ~ ., data=training, method="rpart")
predictDT <- predict(modFitDT, newdata=testing, type = "class")
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
?predict
predictDT <- predict(modFitDT, testing)
confusionMatrixDT <- confusionMatrix(predictDT, testing$classe)
confusionMatrixDT
predict(modFitDT, testData)
modFitDT$finalModel
set.seed(503)
trControlGBM <- trainControl(method = "cv", number = 5)
modFitGBM  <- train(classe ~ ., data=training, method = "gbm",
trControl = trControlGBM, verbose = FALSE)
confusionMatrixGBM
predictGBM <- predict(modFitGBM, testing)
confusionMatrixGBM <- confusionMatrix(predictGBM, testing$classe)
confusionMatrixGBM
predict(modFitGBM, testData)
confusionMatrixGBM
modFitGBM$finalModel
modFitGBM
confusionMatrixDT
confusionMatrixRF
class(trainData$new_window)
dim(training)
names(training)
sapply(trainData, function(x) sum(is.na(x)))
trainDatagFactors <- colnames(trainData)[colSums(is.na(trainData)) == 0]
allFactors <- union(trainDataFactors, testDataFactors)
trainData <- trainData[, names(trainData) %in% allFactors]
trainDataFactors <- colnames(trainData)[colSums(is.na(trainData)) == 0]
allFactors <- union(trainDataFactors, testDataFactors)
trainData <- trainData[, names(trainData) %in% allFactors]
trainData <- trainData[, -c(1:5)]
trainData$new_window <- as.integer(trainData$new_window)
library(caret)
inTrain  <- createDataPartition(y=trainData$classe, p=0.7, list=FALSE)
training <- trainData[inTrain, ]
testing  <- trainData[-inTrain, ]
dim(training)
dim(testing)
dim(testData)
modFitGBM
hello i am a smelly son of tony
install.packages("shiny")
library(shiny)
rm(list=ls())
shiny::runApp('R_programming/course 9/testApp')
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
library(miniUI)
install.packages("miniUI")
library(miniUI)
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)}
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
?runGadget
multiplyNumbers(1234, 5678)
?function
()
q
library(shiny)
shinyUI(fluidPage(
titlePanel("Data science FTW!"),
sidebarLayout(
sidebarPanel(
h3("Sidebar Text")
),
mainPanel(
h3("Main Panel Text")
)
)
))
library(shiny)
shinyServer(function(input, output) {
})
runApp()
library(leaflet)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
data()
data("rivers")
head(rivers)
rivers
head(WorldPhones)
WorldPhones
USArrests
mcars
mtcars
plot(mtcars$hp, trees$mpg, xlab = "Horse Power",
ylab = "Miles per Gallon", main = "Car Horse Power",
cex = 1.5, pch = 16, bty = "n")
plot(mtcars$qsec, trees$mpg, xlab = "Horse Power",
ylab = "Miles per Gallon", main = "Car Horse Power",
cex = 1.5, pch = 16, bty = "n")
plot(mtcars$qsec, trees$hp, xlab = "Horse Power",
ylab = "Miles per Gallon", main = "Car Horse Power",
cex = 1.5, pch = 16, bty = "n")
plot(mtcars$qsec, trees$cyl, xlab = "Horse Power",
ylab = "Miles per Gallon", main = "Car Horse Power",
cex = 1.5, pch = 16, bty = "n")
plot(mtcars$qsec, trees$disp, xlab = "Horse Power",
ylab = "Miles per Gallon", main = "Car Horse Power",
cex = 1.5, pch = 16, bty = "n")
plot(mtcars$qsec, trees$carb, xlab = "qsec",
ylab = "carb", main = "1/4 mile time",
cex = 1.5, pch = 16, bty = "n")
shiny::runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
?boxplot
boxplot(mtcars$hp ~ mtcars[[input$x_hp]], xlab = input$x_hp,
ylab = "Gross Horsepower" )
boxplot(mtcars$hp ~ mtcars[["mpg"]], xlab = "mpg",
ylab = "Gross Horsepower" )
boxplot(mtcars$hp ~ mtcars[["am"]], xlab = "am",
ylab = "Gross Horsepower" )
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
shiny::runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
model_hp
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
input$brush_hp
input$x_hp
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
brushed_data
brushed_data
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
model_hp()
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
brushed_data
brushed_data
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
model_hp()
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
brushed_data
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
shiny::runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
shiny::runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
runApp('R_programming/course 9/Week4 Assignment/ShinyApp')
setwd("~/R_programming/course 9/Week4 Assignment/ShinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
